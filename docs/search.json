[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "O kursu",
    "section": "",
    "text": "Pred Vama je preliminarni plan kursa. Moguće je da će pojedinačne sesije izgledati nešto drugačije od onoga što je ovde napisano, usled toga što ćemo možda morati da se prilagodimo tempu rada koji odgovara većini.\nMaterijali za čitanje i učenje za svaki čas biće svima dostupni u elektronskom formatu. Podeliću ih sa vama pre časa, ili nakon časa.\nTo se odnosi i na materijale koje ćemo koristiti za domaće zadatke. Domaći zadaci su dosta važni, zato što nećemo sve važne stvari uspeti da pokrijemo tokom lekcija (a ni ne moramo - samostalno učenje je svakako jedna od najvažnijih veština koja nam je potrebna u bilo kojoj istraživačkoj oblasti, ne najmanje u nauci o podacima).\nU periodu između svake dve sesije, moći ćemo da ostanemo u kontaktu preko Slack / Discord kanala, koji ću pripremiti. Važno je da svi polaznici budu otvoreni za razmenu ideja, pitanja i odgovora na ovom kanalu. Zašto je to važno? Da bismo mogli da učimo jedni od drugih. U ranim stupnjevima programiranja često će se javljati slična pitanja i problemi, i ukoliko budemo učili jedni od drugih, uspećemo da ih lakše i brže savladamo."
  },
  {
    "objectID": "about.html#struktura-kursa",
    "href": "about.html#struktura-kursa",
    "title": "O kursu",
    "section": "Struktura kursa",
    "text": "Struktura kursa\nKurs se sastoji iz dve celine:\n\nUvod u Python (sesije 1 - 5) i\nUvod u mašinsko učenje (sesije 6 - 10)\n\nEvo i spiska pojedinačnih sesija:\n\nSesija 1: Intro to Python\nSesija 2: More Data Types & Control Flow\nSesija 3: Intro to Functions & Pandas\nSesija 4: Intro to Data Visualization\nSesija 5: Not in Kansas Anymore\nSesija 6: Intro to ML & Linear Regression\nSesija 7: Logistic Regression\nSesija 8: Love Thy Neighbor, Robot\nSesija 9: Can’t See The Forest For The Trees\nSesija 10: Unsupervised Learning - Clustering"
  },
  {
    "objectID": "about.html#detaljniji-pregled-sesija",
    "href": "about.html#detaljniji-pregled-sesija",
    "title": "O kursu",
    "section": "Detaljniji pregled sesija",
    "text": "Detaljniji pregled sesija\n\nSesija 1: Intro to Python\n\nZnačaj i kratka istorija programskog jezika “Python”\nOkruženja u kojima je moguće raditi u Python-u\n\nZa prvi čas ćemo koristiti Google Colab - nikakva instalacija nije neophodna\n\nAritmetičke operacije u Python-u\nDefinisanje i upotreba varijabli\nOsnovni tipovi podataka (int, float, str)\nOperatori poređenja\nLogički operatori\nUvod u liste\nDomaći zadatak:\n\nInstalacija Pythona na lični računar, prateći priložena uputstva\nPronađite neku zanimljivost o Python-u, podelite je sa ostalima\n\n\n\n\n\nSesija 2: More Data Types & Control Flow\n\nNumPy vektori (arrays)\nRečnici (dictionary)\nUvod u Pandas (i DataFrame tip podataka)\nKontrola toka u Python-u:\n\nif, else i elif operatori\n\nPetlje (loops): for i while\nDomaći zadatak:\n\nUpoznavanje sa tipom podataka tuple\nBliže upoznavanje sa svojstvima numpy vektora (arrays)\nRešavanje nekolicine jednostavnih programerskih zadataka uz pomoć naučenih operatora i petlji\n\n\n\n\n\nSesija 3: Intro to Functions & Pandas\n\nDefinsanje funkcija - osnovna sintaksa + definisanje argumenata\nProdubljivanje znanja rada u paketu Pandas\nResursi za učenje i vežbu - izvori podataka\nKaggle, inside airbnb, eurostat, …\nOčekivani rezultat: Elementarno igranje sa .csv podacima pomoću paketa Pandas\n\n\n\n\nSesija 4: Intro to Data Visualization\n\nKratko podsećanje na tipove vizualizacije podataka:\n\nscatterplots, histograms, bar charts, box plots, heatmaps…\n\nVizuelizacije koje su ugrađene u Pandas\nVizuelizacije u paketu Matplotlib - osnovni paket za vizualizaciju u Python Data Science zajednici\nKoje još opcije za vizuelizaciju postoje?\n\nSeaborn\nPlotly\n\nEkskurs: Može li se Python koristiti za stvaranje umetnosti?\nDomaći zadatak:\n\nNekoliko vizuelizacija podataka po izboru studenata +\nkreativnost\n\n\n\n\n\nSesija 5: Not in Kansas Anymore\n\nFile handling\nHandling exceptions\nRad sa datumima\nRad sa nedostajućim podacima (“missing data”)\nList comprehensions\n\n\n\n\nSesija 6: Intro to ML & Linear Regression\n\nUkratko o mašinskom učenju, njegovim granama i primenama\nSupervised VS Unsupervised ML (+ semi-supervised & reinforcement learning)\nTipični “workflow” u ML projektu u biblioteci scikit-learn\nLinearna regresija - kako, zašto, kada?\nDomaći zadatak: Primena linearne regresije na jedno istraživačko pitanje\n\n\n\n\nSesija 7: Logistic Regression\n\nUvod u mere performanse\nLogistička regresija\n\n\n\nSesija 8: Love Thy Neighbor, Robot\n\nKNN\nSVMs\nAdditional readings: Naive Bayes\n\n\n\n\nSesija 9: Can’t See The Forest For The Trees\n\nDecision Trees\nRandom Forests\n\n\n\n\nSesija 10: Unsupervised Learning - Clustering\n\nIntro to unsupervised learning\nK-means clustering\nRecap of the second part of the course!"
  },
  {
    "objectID": "about.html#potencijalne-teme---u-zavisnosti-od-dostupnog-vremena-i-interesovanja",
    "href": "about.html#potencijalne-teme---u-zavisnosti-od-dostupnog-vremena-i-interesovanja",
    "title": "O kursu",
    "section": "Potencijalne teme - u zavisnosti od dostupnog vremena i interesovanja",
    "text": "Potencijalne teme - u zavisnosti od dostupnog vremena i interesovanja\n\nNatural Language Processing\nDimensionality reduction\nUvod u korišćenje paketa Streamlit, za pravljenje jednostavnih veb aplikacija\nUvod u web-scraping"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to Data Science for Social Scientists",
    "section": "",
    "text": "Zdravo svima, i dobrodošli!\nHteo bih da Vas informišem o projektu koji želim da pokrenem: “Introduction to Data Science for Social Scientists”.\nReč je o besplatnom kursu upotrebe programskog jezika Python i tehnika mašinskog učenja."
  },
  {
    "objectID": "index.html#zašto-python",
    "href": "index.html#zašto-python",
    "title": "Introduction to Data Science for Social Scientists",
    "section": "Zašto Python?",
    "text": "Zašto Python?\nPython je jedan od najpopularnijih programskih jezika na svetu i poznavanje njegovih osnova je velika omparativna prednost u svakoj profesiji. Lak je za učenje. “Otključava” vrata programiranja, i primenljiv je u širokom nizu oblasti."
  },
  {
    "objectID": "index.html#zašto-mašinsko-učenje",
    "href": "index.html#zašto-mašinsko-učenje",
    "title": "Introduction to Data Science for Social Scientists",
    "section": "Zašto mašinsko učenje?",
    "text": "Zašto mašinsko učenje?\nMašinsko učenje je jedna od najvažnijih oblasti u okviru nauke o podacima. Predstavlja ekstenziju tehnika statističkog zaključivanja, sa kojima ste možda već upoznati, i koristi se za ekstrahovanje korisnih uvida u čitavom nizu oblasti. “Data Science” predstavlja simbiozu naučnog istraživanja i primene najsavremenijih analitičkih metoda na velike količine podataka kako bi se došlo do korisnih saznanja u širokom nizu oblasti. Studenti društvenih nauka poseduju dobre predispozicije da budu uspešni u ovoj oblasti, a saznanja iz nje im mogu pomoći i da budu bolji društveni naučnici."
  },
  {
    "objectID": "index.html#šta-je-cilj-programa",
    "href": "index.html#šta-je-cilj-programa",
    "title": "Introduction to Data Science for Social Scientists",
    "section": "Šta je cilj programa?",
    "text": "Šta je cilj programa?\nPrvi cilj programa je da polaznici steknu dovoljno znanja iz Python-a da mogu samostalno da nastave učenje. Drugi cilj je da polaznici steknu dovoljno znanja iz oblasti mašinskog učenja da mogu da različite tehnike iz ove oblasti primene u rešavanju svojih istraživačkih pitanja.\nVoleo bih da u toku kursa što više sarađujemo, razvijamo zajedničke projekte, učimo jedni od drugih i sklapamo istraživačka partnerstva. Naglasak je na primeni naučenog.\nCilj programa nije upoznavanje sa tzv. “neuronskim mrežama”."
  },
  {
    "objectID": "index.html#šta-su-planirani-rezultati-ovog-programa",
    "href": "index.html#šta-su-planirani-rezultati-ovog-programa",
    "title": "Introduction to Data Science for Social Scientists",
    "section": "Šta su planirani rezultati ovog programa?",
    "text": "Šta su planirani rezultati ovog programa?\nVoleo bih da svakom zainteresovanom polazniku ovaj program pruži dovoljno znanja, inspiracije i podrške da do njegovog kraja napravi 3-4 manjih data-projekata koje može da prikaže u svom portfoliju, kao i jedan finalni, veći, grupni projekat. Ovo će naravno, u velikoj meri zavisiti od lične spremnosti na zalaganje svakog polaznika. Takođe, voleo bih da tokom trajanja projekta formiramo online “biblioteku” znanja - rešenih nedoumica, tipičnih dilema, zanimljivosti i korisnih resursa za učenje, kao i da predavanja postavimo na Youtube, kako bi bila dostupna svima koji se interesuju za Python i Data Science."
  },
  {
    "objectID": "index.html#kome-je-program-namenjen-koji-su-preduslovi-za-učešće-u-njemu",
    "href": "index.html#kome-je-program-namenjen-koji-su-preduslovi-za-učešće-u-njemu",
    "title": "Introduction to Data Science for Social Scientists",
    "section": "Kome je program namenjen? Koji su preduslovi za učešće u njemu?",
    "text": "Kome je program namenjen? Koji su preduslovi za učešće u njemu?\nProgram je namenjen studentima sociologije i psihologije sa savladanim osnovama statistike (više godine studija).\n\nZainteresovan/a sam za program, ali se ne uklapam u gore navedeni profil. Šta da radim?\nPišite mi, na adresu viskovic.vukasin@gmail.com. Ukoliko se Vaša interesovanja, iskustvo i motivacija poklapaju sa načinom na koji je kurs zamišljen, to ne bi trebalo da bude prepreka.\n\nDalji preduslovi podrazumevaju radoznalost, motivisanost za samostalno istraživanje i deljenje znanja, spremnost na saradnju, posvećenost programu (spremnost da mu posvetite barem 2 sata nedeljno), poznavanje osnova statistike i rada na računaru (ukoliko, recimo, već koristite Excel ili SPSS, pohađanje kursa će Vam biti znatno olakšano) i razumevanje pročitanog na engleskom jeziku. Naravno, dobro bi bilo imati i stabilnu internet konekciju."
  },
  {
    "objectID": "index.html#iz-kojih-oblasti-i-aktivnosti-se-kurs-sastoji",
    "href": "index.html#iz-kojih-oblasti-i-aktivnosti-se-kurs-sastoji",
    "title": "Introduction to Data Science for Social Scientists",
    "section": "Iz kojih oblasti i aktivnosti se kurs sastoji?",
    "text": "Iz kojih oblasti i aktivnosti se kurs sastoji?\nNa ovom linku možete naći preliminarni plan sesija sa spiskom oblasti koje ćemo pokriti i aktivnosti kojima ćemo se baviti."
  },
  {
    "objectID": "index.html#materijali-za-učenje",
    "href": "index.html#materijali-za-učenje",
    "title": "Introduction to Data Science for Social Scientists",
    "section": "Materijali za učenje?",
    "text": "Materijali za učenje?\nBiće obezbeđeni u elektronskom formatu pre/posle svake sesije. Koristićemo delove knjiga, članke, video snimke i delove Python koda."
  },
  {
    "objectID": "index.html#trajanje-programa-početak-programa-gde-i-kada-se-sastajemo",
    "href": "index.html#trajanje-programa-početak-programa-gde-i-kada-se-sastajemo",
    "title": "Introduction to Data Science for Social Scientists",
    "section": "Trajanje programa? Početak programa? Gde i kada se sastajemo?",
    "text": "Trajanje programa? Početak programa? Gde i kada se sastajemo?\nProgram bi trajao 3-4 meseca, sa početkom u martu. Imalo bismo ukupno oko 10 jednočasovnih do jednoipočasovnih sesija. Sastajali bismo se jednom nedeljno, verovatno subotom, preko Zoom-a ili slične platforme. Dakle, online. Više informacija šaljem blagovremeno."
  },
  {
    "objectID": "index.html#da-li-se-učešće-u-programu-plaća",
    "href": "index.html#da-li-se-učešće-u-programu-plaća",
    "title": "Introduction to Data Science for Social Scientists",
    "section": "Da li se učešće u programu plaća?",
    "text": "Da li se učešće u programu plaća?\nNe, celokupan program je besplatan."
  },
  {
    "objectID": "index.html#ko-sam-ja",
    "href": "index.html#ko-sam-ja",
    "title": "Introduction to Data Science for Social Scientists",
    "section": "Ko sam ja?",
    "text": "Ko sam ja?\nZovem se Vukašin Višković. Završio sam osnovne studije sociologije na Filozofskom fakultetu u Beogradu, i master studije sociologije na Freie Univerzitetu u Berlinu. U svom akademskom i profesionalnom radu sam koristio Python i R za analizu podataka, i u tom pogledu imam višegodišnje iskustvo. Zaposlen sam kao Data Analyst / Data Scientist na Institutu za primenjena zdravstvena istraživanja u Berlinu. Na ovom linku možete saznati malo više o meni (moj LinkedIn profil).\nŽelim da svoje znanje podelim sa Vama, ali i da učim zajedno sa Vama i od Vas."
  },
  {
    "objectID": "index.html#sledeći-koraci",
    "href": "index.html#sledeći-koraci",
    "title": "Introduction to Data Science for Social Scientists",
    "section": "Sledeći koraci?",
    "text": "Sledeći koraci?\nSlobodno upišite svoje ime i imejl adresu u polja u dnu ovog dokumenta, ukoliko ste zainteresovani za program. Ovo ne znači da ste u obavezi da pohađate program, već mi samo omogućava da procenim generalnu zainteresovanost, i osmislim dalje korake. Nakon toga ću Vas kontaktirati preko imejla sa detaljnijim informacijama."
  },
  {
    "objectID": "index.html#pitanja",
    "href": "index.html#pitanja",
    "title": "Introduction to Data Science for Social Scientists",
    "section": "Pitanja?",
    "text": "Pitanja?\nMožete mi pisati na imejl adresu: viskovic.vukasin@gmail.com\nTu sam da odgovorim na sva Vaša pitanja.\n\nHvala na interesovanju!\nVukašin"
  },
  {
    "objectID": "sessions.html",
    "href": "sessions.html",
    "title": "Sessions",
    "section": "",
    "text": "Session 1: Intro to Python\nSession 2: More Data Types & Control Flow\nSession 3: Intro to Functions & Pandas\nSession 4: Intro to Data Visualization\nSession 5: Not in Kansas Anymore\nSession 6: Intro to ML & Linear Regression\nSession 7: Logistic Regression\nSession 8: Love Thy Neighbor, Robot\nSession 9: Can’t See The Forest For The Trees\nSession 10: Unsupervised Learning - Clustering"
  },
  {
    "objectID": "session_001.html",
    "href": "session_001.html",
    "title": "Lesson 1 - Intro to Python",
    "section": "",
    "text": "Irises\nToday, we’ll cover the following material:"
  },
  {
    "objectID": "session_001.html#pythons-history-relevance-and-usefulness",
    "href": "session_001.html#pythons-history-relevance-and-usefulness",
    "title": "Lesson 1 - Intro to Python",
    "section": "1. Python’s history, relevance and usefulness ",
    "text": "1. Python’s history, relevance and usefulness \n\n\n\nWheat Field with Cypresses\n\n\n\nPython is a widely-used general-purpose, high-level programming language. It was initially designed by Guido van Rossum in 1991 and developed by Python Software Foundation. It was mainly developed for emphasis on code readability, and its syntax allows programmers to express concepts in fewer lines of code.\n\n\nWhat started as a hobby project, soon became a general purpose programming language: nowadays, you can use Python to build practically any piece of software.\nBut how did this happen?\nWell, first of all, Python is open source. It’s free to use.\nSecond, it’s very easy to build packages in Python, which is code that you can share with other people to solve specific problems. Throughout time, more and more of these packages specifically built for data science have been developed. Suppose you want to make some fancy visualizations of your company’s sales. There’s a package for that. Or what about connecting to a database to analyze sensor measurements? There’s also a package for that. People often refer to Python as the swiss army knife of programming languages as you can do almost anything with it."
  },
  {
    "objectID": "session_001.html#arithmetic-operators-comments-basic-functions",
    "href": "session_001.html#arithmetic-operators-comments-basic-functions",
    "title": "Lesson 1 - Intro to Python",
    "section": "2. Arithmetic Operators + Comments + Basic Functions ",
    "text": "2. Arithmetic Operators + Comments + Basic Functions \n\n\n\nBedroom in Arles\n\n\n\n## Multiplication\n1 + 2\n\n3\n\n\nIn Python, we use the hash sign (#) to write comments.\nEverything written after a hash sign isn’t evaluated - it’s ignored.\nI tend to use two hash signs for my comments, and one for ignoring problematic bits of code before I delete them.\nThis method only works for one-line comments, though.\nWe can also write multi-line comments, but we’ll talk about it more in the later sessions of the course.\n\n\n🏠 Can you find out how to write multi-line comments in Python?Write a reproducible example in the forum.\n\n\n\n## Multiplication\n2 * 5\n\n10\n\n\n\n## Division\n10 / 2\n\n5.0\n\n\n\n## Be careful when attempting to divide by zero! \n## Computers really don't like it :')\n10 / 0\n\nZeroDivisionError: division by zero\n\n\n\n## \"Modulo\" operator\n10 % 2 ## This operation gives us the remainder of a division\n\n## What is the result of the operation \"9 % 2\"? \n\n0\n\n\n\n## Exponents\n\nprint(9 ** 2) ## Introducing the \"print()\" function\nprint(9 ** 3)\n\n81\n729\n\n\n\nLearning more about functions → help() function\nUnderstanding the documentation\n\n\nhelp(print)\n\nHelp on built-in function print in module builtins:\n\nprint(...)\n    print(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n    \n    Prints the values to a stream, or to sys.stdout by default.\n    Optional keyword arguments:\n    file:  a file-like object (stream); defaults to the current sys.stdout.\n    sep:   string inserted between values, default a space.\n    end:   string appended after the last value, default a newline.\n    flush: whether to forcibly flush the stream.\n\n\n\n\n## How do we get the square root of a number?\n\n9 ** (1 / 2) ## Order of operations matters ## Try out: \"9 ** 1 / 2\"\n\n3.0\n\n\n\n\n🏠 There’s a nice library we can use to make the syntax for finding the square root of a number a bit nicer. Can you find this library and demonstrate how to use it for finding the square root of 9?\n\n\n\n## Order of operations\n\nprint(1 + 2 * 5 - 6 / 8 ** 2)\n\n## Using brackets isn't necessary, but can make your code more readable\nprint(1 + (2 * 5) - (6 / (8 ** 2)))\n\n## Always make sure each opening bracket is paired with a closing bracket\n## Most IDEs will help you with this :)\n\n10.90625\n10.90625"
  },
  {
    "objectID": "session_001.html#variables",
    "href": "session_001.html#variables",
    "title": "Lesson 1 - Intro to Python",
    "section": "3. Variables ",
    "text": "3. Variables \n\n\n\nWheatfield with Crows\n\n\n\ndistance = 180 ## Our first variable. Hooray!\n\ntime = 1.5 ## Our second variable. Yuppie!\n\n\ndistance ## Python keeps our variables in memory! We're safe :)\n\n180\n\n\n\n180 / 1.5\n\n120.0\n\n\n\ndistance / time\n\n120.0\n\n\n\n#distance = 180 \n#time = 1.5 \nspeed = distance / time ## saving the result in a new variable\nspeed\n\n120.0\n\n\n\n#distance = 180 ## this variable stays unchanged\ntime = 2.5 ## this one we do change\nspeed = distance / time \nspeed ## this one changes accordingly!\n\n72.0"
  },
  {
    "objectID": "session_001.html#elementary-data-types-int-float-str",
    "href": "session_001.html#elementary-data-types-int-float-str",
    "title": "Lesson 1 - Intro to Python",
    "section": "4. Elementary Data Types (int, float, str) ",
    "text": "4. Elementary Data Types (int, float, str) \n\n\n\nEnclosed Field with Rising Sun\n\n\n\n## Integers\ntype(distance) ## Introducing the \"type()\" function\n\nint\n\n\n\ndistance\n\n180\n\n\n\n## Floats\ntype(speed)\n\nfloat\n\n\n\nspeed\n\n72.0\n\n\nSo far, we’ve only worked with numeric data types (integers and floats).\nThere are, however, many other types of data we can (and will often) use.\n\n\n❔ Can you think of other ways how information can be stored?\n\n\n\n\"Hello World\" ## Introducing strings!\n\n'Hello World'\n\n\n\nprint(\"Hello World\")\nprint(\"How's everyone doing?\") ## Using \"\" + '\nprint('It is okay, thanks for checking') ## Using '' instead of \"\"\n\nHello World\nHow's everyone doing?\nIt is okay, thanks for checking\n\n\n\nprint('it's about to get strange') ## Yes it is -> this gives us an error. Why?\n\nSyntaxError: invalid syntax (<ipython-input-25-9d7f84d1f160>, line 1)\n\n\n\n## Now, let's define a variable that contains string data\nmy_string = \"Hello! How's it going?\"\nprint(my_string)\nprint(type(my_string)) ## Nesting functions. Be sure the brackets are all paired up\n\nHello! How's it going?\n<class 'str'>\n\n\n\nReserved key words → Why I didn’t name my variable just string, or str\nNaming conventions → I’d advise against: my.string, as well as:\n\nmy-string,\nMyString,\nmyString,\nMYSTRING\nand everything in between.\n\nIf the name includes multiple words, use underscore to delimit them.\n\nIs the name clear and understandable? Is it short and concise?\n\n\n\n## Operations in Python can work across different datatypes\n## However, they behave differently (givr different results)...\n## ... when used with different datatypes\n\na = \"Hello!\"\nb = \"How it's going?\"\nprint(a + b)\nprint((a * 3) + (b * 2))\n\nHello!How it's going?\nHello!Hello!Hello!How it's going?How it's going?\n\n\n\nprint(a + 202) ## Be careful when mixing datatypes. A common cause of errors! \n\nTypeError: can only concatenate str (not \"int\") to str"
  },
  {
    "objectID": "session_001.html#string-indexing-slicing-basic-string-operations",
    "href": "session_001.html#string-indexing-slicing-basic-string-operations",
    "title": "Lesson 1 - Intro to Python",
    "section": "5. String indexing & slicing + Basic string operations ",
    "text": "5. String indexing & slicing + Basic string operations \n\n\n\nThe Sower\n\n\n\n\n\nP\ny\nt\nh\no\nn\n\n\n\n\n0\n1\n2\n3\n4\n5\n\n\n-6\n-5\n-4\n-3\n-2\n-1\n\n\n\n\n## Indexing strings\n\na = \"I love Python\"\na[:5] ## same as a[0:5] ## goes from the 0th element and stops right before the 5th\n\n'I lov'\n\n\n\n## General indexing syntax: \n## string[start_here_include : stop_here_exclude : steps]\n\na = \"I love Python\"\nprint(a[2:5])\nprint(a[2:]) ## Goes from the 2nd index to the end\nprint(a[::1]) ## All as usuall ## same as \"a[::]\", same as \"a\"\nprint(a[::2]) ## Prints every second letter\nprint(a[::-1]) ## Reverses the order of the letters\nprint(a[0]) ## The first letter\n\nlov\nlove Python\nI love Python\nIlv yhn\nnohtyP evol I\nI\n\n\n\n## How can we print/extract the last letter\n\na = \"I love Python\"\nprint(a[12]) ## Counting -> not the best idea -> error-prone; the string can change\nprint(a[-1]) ## The last letter -> much better\n\nn\nn\n\n\n\n## Stay within the range - A common source of errors!\n\nprint(a[13])\n\nIndexError: string index out of range\n\n\n\n## Introducing the \"len()\" function\n\na = \"I love Python\"\nprint(len(a))\n\nprint(a[len(a) - 1]) ## There's our last letter again!\n\n13\nn\n\n\n\nBasic string operations\n\na = \"I love Python\"\na.upper()\n\n'I LOVE PYTHON'\n\n\n\nDifference between functions and methods!\n\n\na ## str.upper() method doesn't operate \"in place\"! \n\n'I love Python'\n\n\n\na = a.upper()\na\n\n'I LOVE PYTHON'\n\n\n\na.lower()\n\n'i love python'\n\n\n\na.split(\" \") ## returns a list!\n\n['I', 'LOVE', 'PYTHON']\n\n\n\na.capitalize()\n\n'I love python'\n\n\n\n\n🏠 Which other string methods are there? Find a few useful examples, and explain them in a comment!\n\n\nBefore we investigate a few more data types, let’s discuss some Comparison Operators."
  },
  {
    "objectID": "session_001.html#comparison-operators-boolean-datatype",
    "href": "session_001.html#comparison-operators-boolean-datatype",
    "title": "Lesson 1 - Intro to Python",
    "section": "6. Comparison operators + Boolean datatype ",
    "text": "6. Comparison operators + Boolean datatype \n\n\n\nStarry Night Over the Rhône\n\n\n\na = 5\nb = 7\n\na > b\n\nFalse\n\n\n\nprint(b < a)\nprint(b == a)\nprint(b != a)\n\nFalse\nFalse\nTrue\n\n\n\nprint(b >= a)\nprint(b <= a)\n\nTrue\nFalse\n\n\n\n## Introducing a new datatype: Say hello to booleans!\n\nc = a > b\nprint(c)\nprint(type(c))\n\nd = a < b\nprint(d)\nprint(type(d))\n\nFalse\n<class 'bool'>\nTrue\n<class 'bool'>"
  },
  {
    "objectID": "session_001.html#logical-operators",
    "href": "session_001.html#logical-operators",
    "title": "Lesson 1 - Intro to Python",
    "section": "7. Logical Operators ",
    "text": "7. Logical Operators \n\n\n\nPrisoners Exercising\n\n\n\na = True\nb = False\n\n\nprint(a and a)\nprint(a and b)\n\nprint(b and b)\n\nprint(a or b)\n\nprint(not a) \nprint(not b)\n\nprint(a and not b)\n\nTrue\nFalse\nFalse\nTrue\nFalse\nTrue\nTrue"
  },
  {
    "objectID": "session_001.html#lists",
    "href": "session_001.html#lists",
    "title": "Lesson 1 - Intro to Python",
    "section": "8. Lists ",
    "text": "8. Lists \n\n\n\nThe Novel Reader\n\n\n\nmy_list = [1, 2, 3, 4, 5]\nprint(my_list)\nprint(type(my_list))\n\n[1, 2, 3, 4, 5]\n<class 'list'>\n\n\n\n## List can hold elements of various data types (at the same time)\n\nlist_of_nums = [1, 2, 3, 4, 5]\nprint(list_of_nums)\n\nlist_of_strings = [\"Hello\", \"Everyone\", \"I\", \"<3\", \"lists\"]\nprint(list_of_strings)\n\nmixed_list = [1, \"a\", 2, \"b\", 3, 4, 5, \"c\"]\nprint(mixed_list)\n\nlist_of_lists = [list_of_nums, list_of_strings, mixed_list]\nprint(list_of_lists)\n\n[1, 2, 3, 4, 5]\n['Hello', 'Everyone', 'I', '<3', 'lists']\n[1, 'a', 2, 'b', 3, 4, 5, 'c']\n[[1, 2, 3, 4, 5], ['Hello', 'Everyone', 'I', '<3', 'lists'], [1, 'a', 2, 'b', 3, 4, 5, 'c']]\n\n\n\n## List indexing & slicing - works similar to string indexing & slicing\nlist_of_nums = [1, 2, 3, 4, 5]\n\n## Let's extract only the first element in the list\nprint(list_of_nums[0])\n\n## Let's extract only the last element in the list\nprint(list_of_nums[-1])\n\n## Let's return each second element -> those at index 0, 2, 4...\nprint(list_of_nums[::2])\n\n## We can also apply the \"len()\" function here -> What does it do?\nprint(len(list_of_nums))\n\n1\n5\n[1, 3, 5]\n5\n\n\n\n## What to do with the list of list?\n\nlist_of_lists = [list_of_nums, list_of_strings, mixed_list]\nprint(list_of_lists)\n## How can we extract the heart (\"<3\") from the second sub-list?\nprint(list_of_lists[1])\nprint(list_of_lists[1][3])\n\n[[1, 2, 3, 4, 5], ['Hello', 'Everyone', 'I', '<3', 'lists'], [1, 'a', 2, 'b', 3, 4, 5, 'c']]\n['Hello', 'Everyone', 'I', '<3', 'lists']\n<3\n\n\n\nBasic list methods\n\nlist_of_strings = [\"Hello\", \"Everyone\", \"I\", \"<3\", \"lists\"]\nlist_of_strings.index(\"<3\")\n\n3\n\n\n\nlist_of_strings\n\n['Hello', 'Everyone', 'I', '<3', 'lists']\n\n\n\nlist_of_strings.append(\"Can I join?\") ## in place!\nlist_of_strings\n\n['Hello', 'Everyone', 'I', '<3', 'lists', 'Can I join?']\n\n\n\n## No, you can't!\n\nlist_of_strings.pop()\nlist_of_strings\n\n['Hello', 'Everyone', 'I', '<3', 'lists']\n\n\n\nlist_of_strings.remove(\"Everyone\")\nlist_of_strings\n\n['Hello', 'I', '<3', 'lists']\n\n\n\n\n🏠 Which other list methods are there? Find a few useful examples, and explain them in a comment!"
  },
  {
    "objectID": "session_001.html#homework",
    "href": "session_001.html#homework",
    "title": "Lesson 1 - Intro to Python",
    "section": "9. Homework ",
    "text": "9. Homework \n\n\n\nOlive Trees\n\n\n\nDownload & install Python\nSet up an IDE of choice\nString methods\nList methods\nSets\nFind something interesting about Python and share it with others"
  },
  {
    "objectID": "session_001.html#additional-readings",
    "href": "session_001.html#additional-readings",
    "title": "Lesson 1 - Intro to Python",
    "section": "10. Additional Readings ",
    "text": "10. Additional Readings \n\n\n\nCafé Terrace at Night\n\n\n\nStyle Best Practices\nReading documentation and asking question is one of the best skills one can develop! No one can know everything.\nhttps://www.markdownguide.org/getting-started/"
  },
  {
    "objectID": "session_002.html",
    "href": "session_002.html",
    "title": "Lesson 2 - More Data Types & Control Flow",
    "section": "",
    "text": "Castle and Sun\nToday, we’ll cover the following:\nBut first, let’s briefly review last week’s topics."
  },
  {
    "objectID": "session_002.html#recap-of-the-previous-session",
    "href": "session_002.html#recap-of-the-previous-session",
    "title": "Lesson 2 - More Data Types & Control Flow",
    "section": "1. Recap of the previous session",
    "text": "1. Recap of the previous session\n\n\n\nInsula dulcamara\n\n\n\nWhy Python?\nData types (int, float, str, list)\nBasic String operations, indexing, slicing\nBasic List operations, indexing, slicing"
  },
  {
    "objectID": "session_002.html#new-data-types-numpy-arrays-intro-to-numpy",
    "href": "session_002.html#new-data-types-numpy-arrays-intro-to-numpy",
    "title": "Lesson 2 - More Data Types & Control Flow",
    "section": "2. New Data Types: NumPy arrays + Intro to NumPy",
    "text": "2. New Data Types: NumPy arrays + Intro to NumPy\n\n\n\nFish Magic\n\n\n\n## Let's say we have two lists that hold information on how much money we spent...\n## on groceries and entertainment during each day of the month - in RS Dinars\n\nexpenses_groceries = [3500, 0, 0, 1200]\nexpenses_entertainment = [1000, 0, 0, 500]\n\n## It would be really nice to get an overview of how much money in total we spent...\n## ... per day.\n\n## Simple, right?\n\nexpenses_groceries + expenses_entertainment \n\n[3500, 0, 0, 1200, 1000, 0, 0, 500]\n\n\nNope, that doesn’t work. At least, not the way we wanted.\nRemember string concatenation?\nRemember how different functions and operators work differently for different data types?\n“+” operator, when used with lists, results in list concatenation.\nIf we want a pairwise summation of elements in two lists, we need the help of a package called NumPy.\nBut first, what are packages?\n\nPackages are collections of objects, such as data types and functions that aren’t available in base Python, but can quickly be imported to enhance its abilities. We use them all the time. They make life much, much easier!\nWhy don’t they exist in base Python?\n\nWhat is NumPy and why it’s important?\n\nimport numpy as np ## This is how we import a package. \n## \"np\" is numpy's commonly used alias\n\nmy_list = [1, 2, 3, 4]\nnp.array(my_list)\n\narray([1, 2, 3, 4])\n\n\n\nmy_array = np.array(my_list)\ntype(my_array)\n\nnumpy.ndarray\n\n\n\nlist_groceries = [3500, 0, 0, 1200]\nlist_entertainment = [1000, 0, 0, 500]\n\narray_grocesies = np.array(expenses_groceries)\narray_enterntainment = np.array(expenses_entertainment)\n\narr_sum = array_grocesies + array_enterntainment\narr_sum ## It works like a charm this time!\n\narray([4500,    0,    0, 1700])\n\n\n\n## list_groceries = [3500, 0, 0, 1200] ## Just to remember\n## list_entertainment = [1000, 0, 0, 500] ## Just to remember\n\n## Okay, now we know how pairwise summation works.\n## What about substraction?\n\nprint(array_grocesies - array_enterntainment)\n\n## Multiplication?\nprint(array_grocesies * array_enterntainment)\n\n[2500    0    0  700]\n[3500000       0       0  600000]\n\n\n\n## Division?\nprint(array_grocesies / array_enterntainment)\n\n[3.5 nan nan 2.4]\n\n\nc:\\Users\\PC\\anaconda3\\lib\\site-packages\\ipykernel_launcher.py:2: RuntimeWarning: invalid value encountered in true_divide\n  \n\n\nPython lists VS NumPy arrays - similarities and differences\n🏠 Algebra: vector and a scalar\n🏠 Algebra: vectors of unequal lengths\n🏠 Indexing and slicing arrays\n🏠 Arrays with more than 1 dimension"
  },
  {
    "objectID": "session_002.html#new-data-types-dictionary",
    "href": "session_002.html#new-data-types-dictionary",
    "title": "Lesson 2 - More Data Types & Control Flow",
    "section": "3. New Data Types: Dictionary",
    "text": "3. New Data Types: Dictionary\n\n\n\nSenecio\n\n\n\n## In real life, we often deal with more complex data structures\n## How can we express them in Python?\n## 1) With lists?\n\nlist_first_names = [\"Ana\", \"Petar\", \"Marko\", \"Jovana\"]\nlist_professions = [\"Accountant\", \"Programmer\", \"Manager\", \"Junior Developer\"]\n\n## Doesn't look so good - not very easy to work with\n\nlist_professions[list_first_names.index(\"Ana\")]\n\n'Accountant'\n\n\n\n## 2) With lists of lists?\n\nlist_employees = [[\"Ana\", \"Accountant\"], \n                  [\"Petar\", \"Programmer\"], \n                  [\"Marko\", \"Manager\"],\n                  [\"Jovana\", \"Junior Developer\"]]\n\n## Still not so good...\n\nfor sublist in list_employees:\n    if \"Ana\" in sublist:\n        print(sublist[sublist.index(\"Ana\") + 1])\n\nAccountant\n\n\n\n## 3) Say hello to dictionaries!\n\ndict_employees = {\"Ana\" : \"Acountant\",\n                  \"Petar\" : \"Programmer\",\n                  \"Marko\" : \"Manager\",\n                  \"Jovana\" : \"Junior Developer\"}\n\ndict_employees[\"Ana\"]\n\n'Acountant'\n\n\n\ntype(dict_employees)\n\ndict\n\n\nDictionaries are defined with {key : value} notation\n(unlike lists: [element1, element2, …]).\nThey are a bit like named lists.\nEach key in a dictionary corresponds to exactly one value.\nDictionaries can contain different data types.\n\n## Dictionary with different datatypes 1 -> strings, integers, lists, ...\n\nmy_dict = {\"course name\" : \"Intro to Python for Social Scientists\",\n           \"starting_date\" : \"2023.04.02\",\n           \"num_participants\" : 20,\n           \"participant_names\" : [\"Marko\", \"Ana\", \"Petar\", \"Jovana\"]}\n\nmy_dict\n\n{'course name': 'Intro to Python for Social Scientists',\n 'starting_date': '2023.04.02',\n 'num_participants': 20,\n 'participant_names': ['Marko', 'Ana', 'Petar', 'Jovana']}\n\n\n\n## Dictionary with different datatypes 2 -> strings, integers, dictionaries, ...\n\ndict_students = {\"Ana\" : \"Acountant\",\n                 \"Petar\" : \"Programmer\",\n                 \"Marko\" : \"Manager\",\n                 \"Jovana\" : \"Junior Developer\"}\n\nmy_dict = {\"course name\" : \"Intro to Python for Social Scientists\",\n           \"starting_date\" : \"2023.04.02\",\n           \"num_participants\" : 20,\n           \"participant_names\" : dict_students}\n\nimport pprint as pp\npp.pprint(my_dict)\n\n{'course name': 'Intro to Python for Social Scientists',\n 'num_participants': 20,\n 'participant_names': {'Ana': 'Acountant',\n                       'Jovana': 'Junior Developer',\n                       'Marko': 'Manager',\n                       'Petar': 'Programmer'},\n 'starting_date': '2023.04.02'}\n\n\n\nKeys 🔑🗝️ and items 🚪\n\nmy_dict.keys()\n\ndict_keys(['course name', 'starting_date', 'num_participants', 'participant_names'])\n\n\n\n## Keys open the door to items 🚪\nmy_dict[\"course name\"]\n\n'Intro to Python for Social Scientists'\n\n\n\nmy_dict.items()\n\ndict_items([('course name', 'Intro to Python for Social Scientists'), ('starting_date', '2023.04.02'), ('num_participants', 20), ('participant_names', {'Ana': 'Acountant', 'Petar': 'Programmer', 'Marko': 'Manager', 'Jovana': 'Junior Developer'})])\n\n\n\n\nIterating over a dictionary\n\n## Iterating over keys:\n\nfor key in my_dict.keys():\n    print(f\"My key is currently: {key}. Let's see what items it opens:\")\n    print(f\"---> {my_dict[key]}\")\n\nMy key is currently: course name. Let's see what items it opens:\n---> Intro to Python for Social Scientists\nMy key is currently: starting_date. Let's see what items it opens:\n---> 2023.04.02\nMy key is currently: num_participants. Let's see what items it opens:\n---> 20\nMy key is currently: participant_names. Let's see what items it opens:\n---> {'Ana': 'Acountant', 'Petar': 'Programmer', 'Marko': 'Manager', 'Jovana': 'Junior Developer'}\n\n\n\n## Iterating over keys and items:\n\nfor key, item in my_dict.items():\n    print(key, \"--->\", item)\n\ncourse name ---> Intro to Python for Social Scientists\nstarting_date ---> 2023.04.02\nnum_participants ---> 20\nparticipant_names ---> {'Ana': 'Acountant', 'Petar': 'Programmer', 'Marko': 'Manager', 'Jovana': 'Junior Developer'}\n\n\n\npets_list = [\"Bobby\", \"Marley\", \"Lessie\"]\n\npets_dict = {}\nfor pet in pets_list:\n    pets_dict[pet] = \"dog\"\n    \nprint(pets_dict)\n\n{'Bobby': 'dog', 'Marley': 'dog', 'Lessie': 'dog'}\n\n\n\nDictionary operations\nDictionary VS other data types\nWhy is a dictionary useful? It’s the basis of Pandas DataFrames!"
  },
  {
    "objectID": "session_002.html#introducing-pandas-very-briefly",
    "href": "session_002.html#introducing-pandas-very-briefly",
    "title": "Lesson 2 - More Data Types & Control Flow",
    "section": "4. Introducing Pandas (very briefly)",
    "text": "4. Introducing Pandas (very briefly)\n\n\n\nBird Comedy\n\n\nWe’ll learn much more about Pandas in the following sessions.\nIt will become one of the main tools in our arsenal.\nIn this brief introduction to this library, we’ll just build upon what we’ve learned about dict objects.\n\nimport pandas as pd\n\ncountries_dict = {\"country\" : [\"Serbia\", \"Slovenia\", \"Slowakia\"],\n                  \"capital\" : [\"Belgrade\", \"Ljubljana\", \"Bratislava\"],\n                  \"population\" : [8000000, 3000000, 6000000]}\n\ncountries_df = pd.DataFrame(countries_dict)\n\ncountries_df\n\n\n\n\n\n  \n    \n      \n      country\n      capital\n      population\n    \n  \n  \n    \n      0\n      Serbia\n      Belgrade\n      8000000\n    \n    \n      1\n      Slovenia\n      Ljubljana\n      3000000\n    \n    \n      2\n      Slowakia\n      Bratislava\n      6000000\n    \n  \n\n\n\n\n\ncountries_df[\"country\"]\n\n0      Serbia\n1    Slovenia\n2    Slowakia\nName: country, dtype: object\n\n\n\ncountries_df[\"capital\"]\n\n0      Belgrade\n1     Ljubljana\n2    Bratislava\nName: capital, dtype: object\n\n\n\ncountries_df[\"country\"][:2]\n\n0      Serbia\n1    Slovenia\nName: country, dtype: object\n\n\nThat’s enough about Pandas for today.\nWe will develop this knowledge much further (and deeper) in the next sessions."
  },
  {
    "objectID": "session_002.html#for-loops",
    "href": "session_002.html#for-loops",
    "title": "Lesson 2 - More Data Types & Control Flow",
    "section": "5. for loops",
    "text": "5. for loops\n\n\n\nLonely Flower\n\n\n\nmy_family = [\"mum\", \"dad\", \"sister\", \"brother\"]\n\nfor i in my_family: \n    print(\"I love my\", i)\n\nI love my mum\nI love my dad\nI love my sister\nI love my brother\n\n\n\nfor letter in \"family\":\n    print(letter)\n\nf\na\nm\ni\nl\ny\n\n\n\nfor letter in \"family\":\n    print(letter * 3)\n\nfff\naaa\nmmm\niii\nlll\nyyy\n\n\n\nfor i in range(10 + 1):\n    print(i)\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n## Let's have a closer look at the range() function\n\nrange(10)\n\nrange(0, 10)\n\n\nWhy did “nothing” happen?\n\n## Let's consult the expert on this one:\n  \nhelp(range)\n\nHelp on class range in module builtins:\n\nclass range(object)\n |  range(stop) -> range object\n |  range(start, stop[, step]) -> range object\n |  \n |  Return an object that produces a sequence of integers from start (inclusive)\n |  to stop (exclusive) by step.  range(i, j) produces i, i+1, i+2, ..., j-1.\n |  start defaults to 0, and stop is omitted!  range(4) produces 0, 1, 2, 3.\n |  These are exactly the valid indices for a list of 4 elements.\n |  When step is given, it specifies the increment (or decrement).\n |  \n |  Methods defined here:\n |  \n |  __bool__(self, /)\n |      self != 0\n |  \n |  __contains__(self, key, /)\n |      Return key in self.\n |  \n |  __eq__(self, value, /)\n |      Return self==value.\n |  \n |  __ge__(self, value, /)\n |      Return self>=value.\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  __getitem__(self, key, /)\n |      Return self[key].\n |  \n |  __gt__(self, value, /)\n |      Return self>value.\n |  \n |  __hash__(self, /)\n |      Return hash(self).\n |  \n |  __iter__(self, /)\n |      Implement iter(self).\n |  \n |  __le__(self, value, /)\n |      Return self<=value.\n |  \n |  __len__(self, /)\n |      Return len(self).\n |  \n |  __lt__(self, value, /)\n |      Return self<value.\n |  \n |  __ne__(self, value, /)\n |      Return self!=value.\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  __repr__(self, /)\n |      Return repr(self).\n |  \n |  __reversed__(...)\n |      Return a reverse iterator.\n |  \n |  count(...)\n |      rangeobject.count(value) -> integer -- return number of occurrences of value\n |  \n |  index(...)\n |      rangeobject.index(value) -> integer -- return index of value.\n |      Raise ValueError if the value is not present.\n |  \n |  ----------------------------------------------------------------------\n |  Static methods defined here:\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  start\n |  \n |  step\n |  \n |  stop\n\n\n\nSo, the range() function on its own outputs a range object.\nLet’s doublecheck:\n\ntype(range(10))\n\nrange\n\n\nMost of the time, we’ll need to pair this with another function to achieve our goals.\nOne such function is the list() function.\nCan you guess the output of list(range(11))?\n\nlist(range(11))\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n\nLet’s learn a bit more about the range() function.\nWe’ve seen that it has three parameters: range(start, stop[, step]).\nBy defauls, start = 0, and step = 1.\n\nprint(list(range(10)))\nprint(list(range(0, 10, 1))) ## Same as the above\nprint(list(range(2, 21, 2))) ## Now we're mixing it up a bit\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n\n\nAnother typical use of the range() function is in combination with a for loop.\nWe instruct Python to perform a certain operation for every element generated within the range object.\nLet’s see some examples:\n\nfor i in range(1, 11):\n    if i % 2 == 0:\n        print(\"We have an even number - it's\", i)\n    else:\n        print(\"\\tOdd one here\", i)\n\n    Odd one here 1\nWe have an even number - it's 2\n    Odd one here 3\nWe have an even number - it's 4\n    Odd one here 5\nWe have an even number - it's 6\n    Odd one here 7\nWe have an even number - it's 8\n    Odd one here 9\nWe have an even number - it's 10\n\n\n🏠 Ask ChatGPT how we could make this code shorter!\n🏠 For all integers between 1 and 100 (including 100), print “Woah” if the number is a multiplier of 3; print “Heey” if it’s a multiplier of 5; print “Now that’s special” if it’s a multiplier of both 3 and 5; print the number itself if none of the above conditions are matcher.\nHint: use a for loop, then add some control flow :)\nIt can be implemented in different ways - think about the structure and elegance of the code."
  },
  {
    "objectID": "session_002.html#while-loops",
    "href": "session_002.html#while-loops",
    "title": "Lesson 2 - More Data Types & Control Flow",
    "section": "6. while loops",
    "text": "6. while loops\n\n\n\nAd Parnassum\n\n\n\nmy_age = 12\n\nwhile my_age < 18:\n    print(\"I'm\", my_age, \"old. I'm not allowed to dring alcohol!\")\n    my_age += 1\n\nprint(\"Now I'm\", my_age, \"years old. Moderate drinking allowed!\")\n\nI'm 12 old. I'm not allowed to dring alcohol!\nI'm 13 old. I'm not allowed to dring alcohol!\nI'm 14 old. I'm not allowed to dring alcohol!\nI'm 15 old. I'm not allowed to dring alcohol!\nI'm 16 old. I'm not allowed to dring alcohol!\nI'm 17 old. I'm not allowed to dring alcohol!\nNow I'm 18 years old. Moderate drinking allowed!\n\n\nBeware of never-ending loops!\nOur loop needs to end - we must somewhere specify a condition that enables the loop to finish!"
  },
  {
    "objectID": "session_002.html#your-computer-please-dont-run-this",
    "href": "session_002.html#your-computer-please-dont-run-this",
    "title": "Lesson 2 - More Data Types & Control Flow",
    "section": "Your computer: Please don’t run this!",
    "text": "Your computer: Please don’t run this!\nmy_bool = True\nwhile my_bool: print(“This is not going to end (well)…”)\n\n## \"break\" statement\n\nword = \"\"\n\nwhile True:\n    word += \"a\"\n    print(word)\n    \n    if len(word) == 5: ## The condition that specifies when the loop should end\n        break ## Explicitely instructing the loop to end here\n\na\naa\naaa\naaaa\naaaaa\n\n\n\n## \"continue\" statement\n\nnum = 0\n\nwhile True:\n    \n    num += 1\n    \n    if num % 2 == 0:\n        print(num)\n    else: ## For odd numbers\n        continue ## We just skip them, and move to the next iteration of the list\n    \n    if num == 10: ## The condition that specifies when the loop should end\n        break\n\n2\n4\n6\n8\n10\n\n\nThis example shows one important lesson of programming:\nMany tasks can be done in different ways.\nHowever, some techniques lend themselves better than others to the task we’re trying to solve.\nHow would you achieve the same result without using the while loop?\nCompare the syntax in terms of clarity and concisiveness."
  },
  {
    "objectID": "session_002.html#homework",
    "href": "session_002.html#homework",
    "title": "Lesson 2 - More Data Types & Control Flow",
    "section": "7. Homework 🏠",
    "text": "7. Homework 🏠\n\n\n\nRevolving House\n\n\n🏠 Which objects are iterable in Python?\n\nNew data type: tuple\n\n\nNew data type: set"
  },
  {
    "objectID": "session_002.html#additional-readings",
    "href": "session_002.html#additional-readings",
    "title": "Lesson 2 - More Data Types & Control Flow",
    "section": "8. Additional Readings",
    "text": "8. Additional Readings\n\n\n\nSailing Boats"
  },
  {
    "objectID": "session_003.html",
    "href": "session_003.html",
    "title": "Lesson 3 - Intro to Functions & Pandas",
    "section": "",
    "text": "Wassily Kandinsky"
  },
  {
    "objectID": "session_003.html#recap-of-the-previous-session",
    "href": "session_003.html#recap-of-the-previous-session",
    "title": "Lesson 3 - Intro to Functions & Pandas",
    "section": "1. Recap of the previous Session",
    "text": "1. Recap of the previous Session\n\n\n\nkandindky_6_banner\n\n\n\nNew Data Types: NumPy arrays + Intro to NumPy\nNew Data Types: Dictionary\nIntroducing Pandas\nControl Flow - if + else + elif\nfor loops\nwhile loops"
  },
  {
    "objectID": "session_003.html#introduction-to-functions-in-python",
    "href": "session_003.html#introduction-to-functions-in-python",
    "title": "Lesson 3 - Intro to Functions & Pandas",
    "section": "2. Introduction to functions in Python",
    "text": "2. Introduction to functions in Python\n\n\n\nkandindky_3_banner\n\n\nCongrats for making to this point in the course.\nExciting times lie ahead. We will learn how to write functions in Python, and will thereby extremely increase our ability to automatize boring tasks, solve challenges and write reusable code!\nLuckily for us, we’re not totaly unfamiliar with functions. We’ve already seen a few examples of functions.\nRemember any?\n\nprint(\"Hello world!\")\n\nHello world!\n\n\nThat’s right, print() is a function.\nEach function consists of a function call,\nHow do we define functions?\n\ndef my_function():\n    return \"This is my first function. It only consists of a function call. It includes no arguments.\"\n\n\nmy_function()\n\n'This is my first function. It only consists of a function call. It includes no arguments.'\n\n\n\nmy_function\n\n<function __main__.my_function()>\n\n\n\ndef sum_up(a, b):\n    return a + b\n\n\nsum_up(6, 9)\n\n15\n\n\n\nsum_up(\"Did we really want \", \"this to work?\")\n\n'Did we really want this to work?'\n\n\n\n## Let's specify some conditions:\n\ndef sum_nums_up(a, b):\n    condition_a = ((type(a) == int) or (type(a) == float))\n    condition_b = ((type(b) == int) or (type(b) == float))\n    \n    if condition_a and condition_b:\n        return a + b\n    else:\n        print(\"This function is only intended to be used with numbers!\\nPlease check your input again\")\n\n\nsum_nums_up(\"Did we really want \", \"this to work?\")\n\nThis function is only intended to be used with numbers!\nPlease check your input again\n\n\n\ndef sum_squares(a, b):\n    condition_a = ((type(a) == int) or (type(a) == float))\n    condition_b = ((type(b) == int) or (type(b) == float))\n    \n    if condition_a and condition_b:\n        return (a ** 2) + (b ** 2)         \n    else:\n        print(\"This function is only intended to be used with numbers!\\nPlease check your input again\")\n\n\nsum_squares(5, \"hehe\")\n\nThis function is only intended to be used with numbers!\nPlease check your input again\n\n\n\nhelp(sum_squares)\n\nHelp on function sum_squares in module __main__:\n\nsum_squares(a, b)\n\n\n\n\ndef sum_squares(a, b):\n    \"\"\"\n    Returns the sum of the squares of two numbers!\n    \"\"\"\n    condition_a = ((type(a) == int) or (type(a) == float))\n    condition_b = ((type(b) == int) or (type(b) == float))\n    \n    if condition_a and condition_b:\n        return (a ** 2) + (b ** 2)         \n    else:\n        print(\"This function is only intended to be used with numbers!\\nPlease check your input again\")\n\n\nhelp(sum_squares)\n\nHelp on function sum_squares in module __main__:\n\nsum_squares(a, b)\n    Returns the sum of the squares of two numbers!\n\n\n\n\ndef sum_exponents(a, b, exponent):\n\n    condition_a = ((type(a) == int) or (type(a) == float))\n    condition_b = ((type(b) == int) or (type(b) == float))\n    \n    if condition_a and condition_b:\n        return (a ** exponent) + (b ** exponent)         \n    else:\n        print(\"This function is only intended to be used with numbers!\\nPlease check your input again\")\n\n\nsum_exponents(5, 6, 3)\n\n341\n\n\n\nsum_exponents(5, 6)\n\nTypeError: sum_exponents() missing 1 required positional argument: 'exponent'\n\n\n\ndef sum_exponents(a, b, exponent = 2):\n\n    condition_a = ((type(a) == int) or (type(a) == float))\n    condition_b = ((type(b) == int) or (type(b) == float))\n    \n    if condition_a and condition_b:\n        return (a ** exponent) + (b ** exponent)         \n    else:\n        print(\"This function is only intended to be used with numbers!\\nPlease check your input again\")\n\n\nsum_exponents(5, 6)\n\n61"
  },
  {
    "objectID": "session_003.html#revisiting-pandas-overview-of-data",
    "href": "session_003.html#revisiting-pandas-overview-of-data",
    "title": "Lesson 3 - Intro to Functions & Pandas",
    "section": "3. Revisiting Pandas: Overview of Data",
    "text": "3. Revisiting Pandas: Overview of Data\n\n\n\nkandinsky_4_banner\n\n\n\n## As always when using modules that aren't available in base Python, ...\n## ... we must first import them\n\nimport pandas as pd\n\n\nGetting an overview of the data\n\ndf = pd.read_csv('https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv')\n\n\ndf.head() \n\n\n\n\n\n  \n    \n      \n      PassengerId\n      Survived\n      Pclass\n      Name\n      Sex\n      Age\n      SibSp\n      Parch\n      Ticket\n      Fare\n      Cabin\n      Embarked\n    \n  \n  \n    \n      0\n      1\n      0\n      3\n      Braund, Mr. Owen Harris\n      male\n      22.0\n      1\n      0\n      A/5 21171\n      7.2500\n      NaN\n      S\n    \n    \n      1\n      2\n      1\n      1\n      Cumings, Mrs. John Bradley (Florence Briggs Th...\n      female\n      38.0\n      1\n      0\n      PC 17599\n      71.2833\n      C85\n      C\n    \n    \n      2\n      3\n      1\n      3\n      Heikkinen, Miss. Laina\n      female\n      26.0\n      0\n      0\n      STON/O2. 3101282\n      7.9250\n      NaN\n      S\n    \n    \n      3\n      4\n      1\n      1\n      Futrelle, Mrs. Jacques Heath (Lily May Peel)\n      female\n      35.0\n      1\n      0\n      113803\n      53.1000\n      C123\n      S\n    \n    \n      4\n      5\n      0\n      3\n      Allen, Mr. William Henry\n      male\n      35.0\n      0\n      0\n      373450\n      8.0500\n      NaN\n      S\n    \n  \n\n\n\n\n\nhelp(pd.DataFrame.head) ## Methods VS Functions\n\nHelp on function head in module pandas.core.generic:\n\nhead(self: 'FrameOrSeries', n: 'int' = 5) -> 'FrameOrSeries'\n    Return the first `n` rows.\n    \n    This function returns the first `n` rows for the object based\n    on position. It is useful for quickly testing if your object\n    has the right type of data in it.\n    \n    For negative values of `n`, this function returns all rows except\n    the last `n` rows, equivalent to ``df[:-n]``.\n    \n    Parameters\n    ----------\n    n : int, default 5\n        Number of rows to select.\n    \n    Returns\n    -------\n    same type as caller\n        The first `n` rows of the caller object.\n    \n    See Also\n    --------\n    DataFrame.tail: Returns the last `n` rows.\n    \n    Examples\n    --------\n    >>> df = pd.DataFrame({'animal': ['alligator', 'bee', 'falcon', 'lion',\n    ...                    'monkey', 'parrot', 'shark', 'whale', 'zebra']})\n    >>> df\n          animal\n    0  alligator\n    1        bee\n    2     falcon\n    3       lion\n    4     monkey\n    5     parrot\n    6      shark\n    7      whale\n    8      zebra\n    \n    Viewing the first 5 lines\n    \n    >>> df.head()\n          animal\n    0  alligator\n    1        bee\n    2     falcon\n    3       lion\n    4     monkey\n    \n    Viewing the first `n` lines (three in this case)\n    \n    >>> df.head(3)\n          animal\n    0  alligator\n    1        bee\n    2     falcon\n    \n    For negative values of `n`\n    \n    >>> df.head(-3)\n          animal\n    0  alligator\n    1        bee\n    2     falcon\n    3       lion\n    4     monkey\n    5     parrot\n\n\n\n\ndf[:5]\n\n\n\n\n\n  \n    \n      \n      PassengerId\n      Survived\n      Pclass\n      Name\n      Sex\n      Age\n      SibSp\n      Parch\n      Ticket\n      Fare\n      Cabin\n      Embarked\n    \n  \n  \n    \n      0\n      1\n      0\n      3\n      Braund, Mr. Owen Harris\n      male\n      22.0\n      1\n      0\n      A/5 21171\n      7.2500\n      NaN\n      S\n    \n    \n      1\n      2\n      1\n      1\n      Cumings, Mrs. John Bradley (Florence Briggs Th...\n      female\n      38.0\n      1\n      0\n      PC 17599\n      71.2833\n      C85\n      C\n    \n    \n      2\n      3\n      1\n      3\n      Heikkinen, Miss. Laina\n      female\n      26.0\n      0\n      0\n      STON/O2. 3101282\n      7.9250\n      NaN\n      S\n    \n    \n      3\n      4\n      1\n      1\n      Futrelle, Mrs. Jacques Heath (Lily May Peel)\n      female\n      35.0\n      1\n      0\n      113803\n      53.1000\n      C123\n      S\n    \n    \n      4\n      5\n      0\n      3\n      Allen, Mr. William Henry\n      male\n      35.0\n      0\n      0\n      373450\n      8.0500\n      NaN\n      S\n    \n  \n\n\n\n\n\ndf.tail()\n\n\n\n\n\n  \n    \n      \n      PassengerId\n      Survived\n      Pclass\n      Name\n      Sex\n      Age\n      SibSp\n      Parch\n      Ticket\n      Fare\n      Cabin\n      Embarked\n    \n  \n  \n    \n      886\n      887\n      0\n      2\n      Montvila, Rev. Juozas\n      male\n      27.0\n      0\n      0\n      211536\n      13.00\n      NaN\n      S\n    \n    \n      887\n      888\n      1\n      1\n      Graham, Miss. Margaret Edith\n      female\n      19.0\n      0\n      0\n      112053\n      30.00\n      B42\n      S\n    \n    \n      888\n      889\n      0\n      3\n      Johnston, Miss. Catherine Helen \"Carrie\"\n      female\n      NaN\n      1\n      2\n      W./C. 6607\n      23.45\n      NaN\n      S\n    \n    \n      889\n      890\n      1\n      1\n      Behr, Mr. Karl Howell\n      male\n      26.0\n      0\n      0\n      111369\n      30.00\n      C148\n      C\n    \n    \n      890\n      891\n      0\n      3\n      Dooley, Mr. Patrick\n      male\n      32.0\n      0\n      0\n      370376\n      7.75\n      NaN\n      Q\n    \n  \n\n\n\n\n\ndf.sample(n = 10, random_state = 42)\n\n\n\n\n\n  \n    \n      \n      PassengerId\n      Survived\n      Pclass\n      Name\n      Sex\n      Age\n      SibSp\n      Parch\n      Ticket\n      Fare\n      Cabin\n      Embarked\n    \n  \n  \n    \n      709\n      710\n      1\n      3\n      Moubarek, Master. Halim Gonios (\"William George\")\n      male\n      NaN\n      1\n      1\n      2661\n      15.2458\n      NaN\n      C\n    \n    \n      439\n      440\n      0\n      2\n      Kvillner, Mr. Johan Henrik Johannesson\n      male\n      31.0\n      0\n      0\n      C.A. 18723\n      10.5000\n      NaN\n      S\n    \n    \n      840\n      841\n      0\n      3\n      Alhomaki, Mr. Ilmari Rudolf\n      male\n      20.0\n      0\n      0\n      SOTON/O2 3101287\n      7.9250\n      NaN\n      S\n    \n    \n      720\n      721\n      1\n      2\n      Harper, Miss. Annie Jessie \"Nina\"\n      female\n      6.0\n      0\n      1\n      248727\n      33.0000\n      NaN\n      S\n    \n    \n      39\n      40\n      1\n      3\n      Nicola-Yarred, Miss. Jamila\n      female\n      14.0\n      1\n      0\n      2651\n      11.2417\n      NaN\n      C\n    \n    \n      290\n      291\n      1\n      1\n      Barber, Miss. Ellen \"Nellie\"\n      female\n      26.0\n      0\n      0\n      19877\n      78.8500\n      NaN\n      S\n    \n    \n      300\n      301\n      1\n      3\n      Kelly, Miss. Anna Katherine \"Annie Kate\"\n      female\n      NaN\n      0\n      0\n      9234\n      7.7500\n      NaN\n      Q\n    \n    \n      333\n      334\n      0\n      3\n      Vander Planke, Mr. Leo Edmondus\n      male\n      16.0\n      2\n      0\n      345764\n      18.0000\n      NaN\n      S\n    \n    \n      208\n      209\n      1\n      3\n      Carr, Miss. Helen \"Ellen\"\n      female\n      16.0\n      0\n      0\n      367231\n      7.7500\n      NaN\n      Q\n    \n    \n      136\n      137\n      1\n      1\n      Newsom, Miss. Helen Monypeny\n      female\n      19.0\n      0\n      2\n      11752\n      26.2833\n      D47\n      S\n    \n  \n\n\n\n\n\ndf.shape\n\n(891, 12)\n\n\n\nprint(f\"Our dataset has {df.shape[0]} rows and {df.shape[1]} columns\")\n\nOur dataset has 891 rows and 12 columns\n\n\n\nlen(df)\n\n891\n\n\n\ndf.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 12 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   PassengerId  891 non-null    int64  \n 1   Survived     891 non-null    int64  \n 2   Pclass       891 non-null    int64  \n 3   Name         891 non-null    object \n 4   Sex          891 non-null    object \n 5   Age          714 non-null    float64\n 6   SibSp        891 non-null    int64  \n 7   Parch        891 non-null    int64  \n 8   Ticket       891 non-null    object \n 9   Fare         891 non-null    float64\n 10  Cabin        204 non-null    object \n 11  Embarked     889 non-null    object \ndtypes: float64(2), int64(5), object(5)\nmemory usage: 83.7+ KB\n\n\n\ndf.describe()\n\n\n\n\n\n  \n    \n      \n      PassengerId\n      Survived\n      Pclass\n      Age\n      SibSp\n      Parch\n      Fare\n    \n  \n  \n    \n      count\n      891.000000\n      891.000000\n      891.000000\n      714.000000\n      891.000000\n      891.000000\n      891.000000\n    \n    \n      mean\n      446.000000\n      0.383838\n      2.308642\n      29.699118\n      0.523008\n      0.381594\n      32.204208\n    \n    \n      std\n      257.353842\n      0.486592\n      0.836071\n      14.526497\n      1.102743\n      0.806057\n      49.693429\n    \n    \n      min\n      1.000000\n      0.000000\n      1.000000\n      0.420000\n      0.000000\n      0.000000\n      0.000000\n    \n    \n      25%\n      223.500000\n      0.000000\n      2.000000\n      20.125000\n      0.000000\n      0.000000\n      7.910400\n    \n    \n      50%\n      446.000000\n      0.000000\n      3.000000\n      28.000000\n      0.000000\n      0.000000\n      14.454200\n    \n    \n      75%\n      668.500000\n      1.000000\n      3.000000\n      38.000000\n      1.000000\n      0.000000\n      31.000000\n    \n    \n      max\n      891.000000\n      1.000000\n      3.000000\n      80.000000\n      8.000000\n      6.000000\n      512.329200\n    \n  \n\n\n\n\n\ndf.corr()\n\nNameError: name 'df' is not defined"
  },
  {
    "objectID": "session_003.html#selecting-rows-and-columns-in-pandas",
    "href": "session_003.html#selecting-rows-and-columns-in-pandas",
    "title": "Lesson 3 - Intro to Functions & Pandas",
    "section": "4. Selecting rows and columns in Pandas",
    "text": "4. Selecting rows and columns in Pandas\n\n\n\nkandinsky_5_banner\n\n\n\ndf.columns\n\nIndex(['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp',\n       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked'],\n      dtype='object')\n\n\n\ndf[\"Survived\"]\n\n0      0\n1      1\n2      1\n3      1\n4      0\n      ..\n886    0\n887    1\n888    0\n889    1\n890    0\nName: Survived, Length: 891, dtype: int64\n\n\n\ntype(df[\"Survived\"])\n\npandas.core.series.Series\n\n\n\ndf[\"Survived\"][:5]\n\n0    0\n1    1\n2    1\n3    1\n4    0\nName: Survived, dtype: int64\n\n\n\nFiltering rows\n\ndf[\"Survived\"].values\n\narray([0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1,\n       1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1,\n       1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1,\n       1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0,\n       1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0,\n       0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0,\n       0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0,\n       1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0,\n       1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1,\n       0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0,\n       0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0,\n       1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1,\n       0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1,\n       1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0,\n       0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0,\n       0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0,\n       0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1,\n       0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0,\n       1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0,\n       0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,\n       1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,\n       1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0,\n       0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1,\n       1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,\n       1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0,\n       0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1,\n       0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0,\n       0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0,\n       1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1,\n       0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0,\n       0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0,\n       1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1,\n       0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0,\n       0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0,\n       0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1,\n       0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1,\n       1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1,\n       1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0], dtype=int64)\n\n\n\ndf[\"Survived\"].unique()\n\n\ndf[\"Survived\"].value_counts()\n\n0    549\n1    342\nName: Survived, dtype: int64\n\n\n\ntype(df[\"Survived\"].value_counts())\n\npandas.core.series.Series\n\n\n\ndf[\"Survived\"] == 1\n\n0      False\n1       True\n2       True\n3       True\n4      False\n       ...  \n886    False\n887     True\n888    False\n889     True\n890    False\nName: Survived, Length: 891, dtype: bool\n\n\n\ndf[df[\"Survived\"] == 1]\n\n\n\n\n\n  \n    \n      \n      PassengerId\n      Survived\n      Pclass\n      Name\n      Sex\n      Age\n      SibSp\n      Parch\n      Ticket\n      Fare\n      Cabin\n      Embarked\n    \n  \n  \n    \n      1\n      2\n      1\n      1\n      Cumings, Mrs. John Bradley (Florence Briggs Th...\n      female\n      38.0\n      1\n      0\n      PC 17599\n      71.2833\n      C85\n      C\n    \n    \n      2\n      3\n      1\n      3\n      Heikkinen, Miss. Laina\n      female\n      26.0\n      0\n      0\n      STON/O2. 3101282\n      7.9250\n      NaN\n      S\n    \n    \n      3\n      4\n      1\n      1\n      Futrelle, Mrs. Jacques Heath (Lily May Peel)\n      female\n      35.0\n      1\n      0\n      113803\n      53.1000\n      C123\n      S\n    \n    \n      8\n      9\n      1\n      3\n      Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)\n      female\n      27.0\n      0\n      2\n      347742\n      11.1333\n      NaN\n      S\n    \n    \n      9\n      10\n      1\n      2\n      Nasser, Mrs. Nicholas (Adele Achem)\n      female\n      14.0\n      1\n      0\n      237736\n      30.0708\n      NaN\n      C\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      875\n      876\n      1\n      3\n      Najib, Miss. Adele Kiamie \"Jane\"\n      female\n      15.0\n      0\n      0\n      2667\n      7.2250\n      NaN\n      C\n    \n    \n      879\n      880\n      1\n      1\n      Potter, Mrs. Thomas Jr (Lily Alexenia Wilson)\n      female\n      56.0\n      0\n      1\n      11767\n      83.1583\n      C50\n      C\n    \n    \n      880\n      881\n      1\n      2\n      Shelley, Mrs. William (Imanita Parrish Hall)\n      female\n      25.0\n      0\n      1\n      230433\n      26.0000\n      NaN\n      S\n    \n    \n      887\n      888\n      1\n      1\n      Graham, Miss. Margaret Edith\n      female\n      19.0\n      0\n      0\n      112053\n      30.0000\n      B42\n      S\n    \n    \n      889\n      890\n      1\n      1\n      Behr, Mr. Karl Howell\n      male\n      26.0\n      0\n      0\n      111369\n      30.0000\n      C148\n      C\n    \n  \n\n342 rows × 12 columns\n\n\n\n\ndf[(df[\"Survived\"] == 1) & (df[\"Sex\"] == \"female\")]\n\n\n\n\n\n  \n    \n      \n      PassengerId\n      Survived\n      Pclass\n      Name\n      Sex\n      Age\n      SibSp\n      Parch\n      Ticket\n      Fare\n      Cabin\n      Embarked\n    \n  \n  \n    \n      1\n      2\n      1\n      1\n      Cumings, Mrs. John Bradley (Florence Briggs Th...\n      female\n      38.0\n      1\n      0\n      PC 17599\n      71.2833\n      C85\n      C\n    \n    \n      2\n      3\n      1\n      3\n      Heikkinen, Miss. Laina\n      female\n      26.0\n      0\n      0\n      STON/O2. 3101282\n      7.9250\n      NaN\n      S\n    \n    \n      3\n      4\n      1\n      1\n      Futrelle, Mrs. Jacques Heath (Lily May Peel)\n      female\n      35.0\n      1\n      0\n      113803\n      53.1000\n      C123\n      S\n    \n    \n      8\n      9\n      1\n      3\n      Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)\n      female\n      27.0\n      0\n      2\n      347742\n      11.1333\n      NaN\n      S\n    \n    \n      9\n      10\n      1\n      2\n      Nasser, Mrs. Nicholas (Adele Achem)\n      female\n      14.0\n      1\n      0\n      237736\n      30.0708\n      NaN\n      C\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      874\n      875\n      1\n      2\n      Abelson, Mrs. Samuel (Hannah Wizosky)\n      female\n      28.0\n      1\n      0\n      P/PP 3381\n      24.0000\n      NaN\n      C\n    \n    \n      875\n      876\n      1\n      3\n      Najib, Miss. Adele Kiamie \"Jane\"\n      female\n      15.0\n      0\n      0\n      2667\n      7.2250\n      NaN\n      C\n    \n    \n      879\n      880\n      1\n      1\n      Potter, Mrs. Thomas Jr (Lily Alexenia Wilson)\n      female\n      56.0\n      0\n      1\n      11767\n      83.1583\n      C50\n      C\n    \n    \n      880\n      881\n      1\n      2\n      Shelley, Mrs. William (Imanita Parrish Hall)\n      female\n      25.0\n      0\n      1\n      230433\n      26.0000\n      NaN\n      S\n    \n    \n      887\n      888\n      1\n      1\n      Graham, Miss. Margaret Edith\n      female\n      19.0\n      0\n      0\n      112053\n      30.0000\n      B42\n      S\n    \n  \n\n233 rows × 12 columns\n\n\n\n\ndf[(df[\"Survived\"] == 1) & \n   (df[\"Sex\"] == \"female\") & \n   (df[\"Age\"] < 20)].head()\n\n\n\n\n\n  \n    \n      \n      PassengerId\n      Survived\n      Pclass\n      Name\n      Sex\n      Age\n      SibSp\n      Parch\n      Ticket\n      Fare\n      Cabin\n      Embarked\n    \n  \n  \n    \n      9\n      10\n      1\n      2\n      Nasser, Mrs. Nicholas (Adele Achem)\n      female\n      14.0\n      1\n      0\n      237736\n      30.0708\n      NaN\n      C\n    \n    \n      10\n      11\n      1\n      3\n      Sandstrom, Miss. Marguerite Rut\n      female\n      4.0\n      1\n      1\n      PP 9549\n      16.7000\n      G6\n      S\n    \n    \n      22\n      23\n      1\n      3\n      McGowan, Miss. Anna \"Annie\"\n      female\n      15.0\n      0\n      0\n      330923\n      8.0292\n      NaN\n      Q\n    \n    \n      39\n      40\n      1\n      3\n      Nicola-Yarred, Miss. Jamila\n      female\n      14.0\n      1\n      0\n      2651\n      11.2417\n      NaN\n      C\n    \n    \n      43\n      44\n      1\n      2\n      Laroche, Miss. Simonne Marie Anne Andree\n      female\n      3.0\n      1\n      2\n      SC/Paris 2123\n      41.5792\n      NaN\n      C"
  },
  {
    "objectID": "session_003.html#adding-and-manipulating-columns",
    "href": "session_003.html#adding-and-manipulating-columns",
    "title": "Lesson 3 - Intro to Functions & Pandas",
    "section": "5. Adding and manipulating columns",
    "text": "5. Adding and manipulating columns\n\n\n\nkandindky_2_banner\n\n\n\ndf[\"year_of_birth\"] = 1912 - df[\"Age\"]\n\ndf.head()\n\n\n\n\n\n  \n    \n      \n      PassengerId\n      Survived\n      Pclass\n      Name\n      Sex\n      Age\n      SibSp\n      Parch\n      Ticket\n      Fare\n      Cabin\n      Embarked\n      year_of_birth\n    \n  \n  \n    \n      0\n      1\n      0\n      3\n      Braund, Mr. Owen Harris\n      male\n      22.0\n      1\n      0\n      A/5 21171\n      7.2500\n      NaN\n      S\n      1890.0\n    \n    \n      1\n      2\n      1\n      1\n      Cumings, Mrs. John Bradley (Florence Briggs Th...\n      female\n      38.0\n      1\n      0\n      PC 17599\n      71.2833\n      C85\n      C\n      1874.0\n    \n    \n      2\n      3\n      1\n      3\n      Heikkinen, Miss. Laina\n      female\n      26.0\n      0\n      0\n      STON/O2. 3101282\n      7.9250\n      NaN\n      S\n      1886.0\n    \n    \n      3\n      4\n      1\n      1\n      Futrelle, Mrs. Jacques Heath (Lily May Peel)\n      female\n      35.0\n      1\n      0\n      113803\n      53.1000\n      C123\n      S\n      1877.0\n    \n    \n      4\n      5\n      0\n      3\n      Allen, Mr. William Henry\n      male\n      35.0\n      0\n      0\n      373450\n      8.0500\n      NaN\n      S\n      1877.0\n    \n  \n\n\n\n\n\ndf[\"fare_today\"] = df[\"Fare\"] * (1 + 0.0453)**(2023 - 1912)\ndf[[\"Fare\", \"fare_today\"]].head()\n\n\n\n\n\n  \n    \n      \n      Fare\n      fare_today\n    \n  \n  \n    \n      0\n      7.2500\n      991.022468\n    \n    \n      1\n      71.2833\n      9743.910601\n    \n    \n      2\n      7.9250\n      1083.290077\n    \n    \n      3\n      53.1000\n      7258.385245\n    \n    \n      4\n      8.0500\n      1100.376671\n    \n  \n\n\n\n\n\ndf[\"fare_today\"] = round(df[\"fare_today\"], 2)\ndf[[\"Fare\", \"fare_today\"]].head()\n\n\n\n\n\n  \n    \n      \n      Fare\n      fare_today\n    \n  \n  \n    \n      0\n      7.2500\n      991.02\n    \n    \n      1\n      71.2833\n      9743.91\n    \n    \n      2\n      7.9250\n      1083.29\n    \n    \n      3\n      53.1000\n      7258.39\n    \n    \n      4\n      8.0500\n      1100.38\n    \n  \n\n\n\n\n\ndf[\"last_name\"] = df[\"Name\"].apply(lambda name: str(name).split(\",\")[0])\ndf.head()\n\n\n\n\n\n  \n    \n      \n      PassengerId\n      Survived\n      Pclass\n      Name\n      Sex\n      Age\n      SibSp\n      Parch\n      Ticket\n      Fare\n      Cabin\n      Embarked\n      year_of_birth\n      fare_today\n      last_name\n    \n  \n  \n    \n      0\n      1\n      0\n      3\n      Braund, Mr. Owen Harris\n      male\n      22.0\n      1\n      0\n      A/5 21171\n      7.2500\n      NaN\n      S\n      1890.0\n      991.02\n      Braund\n    \n    \n      1\n      2\n      1\n      1\n      Cumings, Mrs. John Bradley (Florence Briggs Th...\n      female\n      38.0\n      1\n      0\n      PC 17599\n      71.2833\n      C85\n      C\n      1874.0\n      9743.91\n      Cumings\n    \n    \n      2\n      3\n      1\n      3\n      Heikkinen, Miss. Laina\n      female\n      26.0\n      0\n      0\n      STON/O2. 3101282\n      7.9250\n      NaN\n      S\n      1886.0\n      1083.29\n      Heikkinen\n    \n    \n      3\n      4\n      1\n      1\n      Futrelle, Mrs. Jacques Heath (Lily May Peel)\n      female\n      35.0\n      1\n      0\n      113803\n      53.1000\n      C123\n      S\n      1877.0\n      7258.39\n      Futrelle\n    \n    \n      4\n      5\n      0\n      3\n      Allen, Mr. William Henry\n      male\n      35.0\n      0\n      0\n      373450\n      8.0500\n      NaN\n      S\n      1877.0\n      1100.38\n      Allen\n    \n  \n\n\n\n\n\ndf[\"last_name\"].nunique()\n\n667"
  },
  {
    "objectID": "session_003.html#pd.dataframe.groupby-aggragate-functions",
    "href": "session_003.html#pd.dataframe.groupby-aggragate-functions",
    "title": "Lesson 3 - Intro to Functions & Pandas",
    "section": "7. pd.DataFrame.groupby() + aggragate functions",
    "text": "7. pd.DataFrame.groupby() + aggragate functions\n\ndf.groupby(\"Survived\")[\"Age\"].mean()"
  },
  {
    "objectID": "session_003.html#homework",
    "href": "session_003.html#homework",
    "title": "Lesson 3 - Intro to Functions & Pandas",
    "section": "6. Homework",
    "text": "6. Homework\n\n\n\nkandindky_7_banner\n\n\n\n.loc and .iloc referencing in Pandas\n“dot” notation in Pandas"
  },
  {
    "objectID": "session_003.html#additional-readings",
    "href": "session_003.html#additional-readings",
    "title": "Lesson 3 - Intro to Functions & Pandas",
    "section": "7. Additional Readings",
    "text": "7. Additional Readings\n\n\n\nkandindky_8_banner"
  },
  {
    "objectID": "session_004.html",
    "href": "session_004.html",
    "title": "Lesson 4 - Intro to Data Visualization",
    "section": "",
    "text": "Today, we’ll cover the following content:"
  },
  {
    "objectID": "session_004.html#recap-of-the-previous-session",
    "href": "session_004.html#recap-of-the-previous-session",
    "title": "Lesson 4 - Intro to Data Visualization",
    "section": "1. Recap of the previous session",
    "text": "1. Recap of the previous session"
  },
  {
    "objectID": "session_004.html#a-quick-reminder",
    "href": "session_004.html#a-quick-reminder",
    "title": "Lesson 4 - Intro to Data Visualization",
    "section": "2. A quick reminder",
    "text": "2. A quick reminder\nWhy do we even use visualizations?\nBecause they help us understand the relationship between different variables in our dataset."
  },
  {
    "objectID": "session_004.html#pandas-built-in-visualizations",
    "href": "session_004.html#pandas-built-in-visualizations",
    "title": "Lesson 4 - Intro to Data Visualization",
    "section": "3. Pandas built-in visualizations",
    "text": "3. Pandas built-in visualizations\n\nimport pandas as pd\n## Matplotlib must be there, running under the hood!\nimport matplotlib.pyplot as plt ## This is how we import it, by convention\n\nplt.rcParams[\"figure.dpi\"] = 150\n\ndf = pd.read_csv('https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv')\n\n\ndf.head() ## Just a quick reminder :)\n\n\n\n\n\n  \n    \n      \n      PassengerId\n      Survived\n      Pclass\n      Name\n      Sex\n      Age\n      SibSp\n      Parch\n      Ticket\n      Fare\n      Cabin\n      Embarked\n    \n  \n  \n    \n      0\n      1\n      0\n      3\n      Braund, Mr. Owen Harris\n      male\n      22.0\n      1\n      0\n      A/5 21171\n      7.2500\n      NaN\n      S\n    \n    \n      1\n      2\n      1\n      1\n      Cumings, Mrs. John Bradley (Florence Briggs Th...\n      female\n      38.0\n      1\n      0\n      PC 17599\n      71.2833\n      C85\n      C\n    \n    \n      2\n      3\n      1\n      3\n      Heikkinen, Miss. Laina\n      female\n      26.0\n      0\n      0\n      STON/O2. 3101282\n      7.9250\n      NaN\n      S\n    \n    \n      3\n      4\n      1\n      1\n      Futrelle, Mrs. Jacques Heath (Lily May Peel)\n      female\n      35.0\n      1\n      0\n      113803\n      53.1000\n      C123\n      S\n    \n    \n      4\n      5\n      0\n      3\n      Allen, Mr. William Henry\n      male\n      35.0\n      0\n      0\n      373450\n      8.0500\n      NaN\n      S\n    \n  \n\n\n\n\n\ndf[\"Age\"].plot(kind = \"hist\")\n\n<AxesSubplot:ylabel='Frequency'>\n\n\n\n\n\n\ndf.plot.scatter(x = \"Age\", y = \"Fare\")\n\n<AxesSubplot:xlabel='Age', ylabel='Fare'>\n\n\n\n\n\n\ndf[\"Sex\"].value_counts()\n\nmale      577\nfemale    314\nName: Sex, dtype: int64\n\n\n\ndf[\"Sex\"].value_counts().plot(kind = \"bar\")\n\n<AxesSubplot:>\n\n\n\n\n\n\ndf.groupby(\"Pclass\")[\"Survived\"].mean()\n\nPclass\n1    0.629630\n2    0.472826\n3    0.242363\nName: Survived, dtype: float64\n\n\n\ndf.groupby(\"Pclass\")[\"Survived\"].mean().plot(kind = \"bar\")\n\n<AxesSubplot:xlabel='Pclass'>\n\n\n\n\n\n\ndf.groupby(\"Pclass\")[\"Age\"].plot(kind = \"hist\", alpha = 0.5)\nplt.legend()\n\n<matplotlib.legend.Legend at 0x2398d9e4ec8>\n\n\n\n\n\n\ndf.groupby(\"Survived\")[\"Age\"].plot(kind = \"hist\", alpha = 0.5)\nplt.legend()\n\n<matplotlib.legend.Legend at 0x2398da03888>"
  },
  {
    "objectID": "session_004.html#matplotlib",
    "href": "session_004.html#matplotlib",
    "title": "Lesson 4 - Intro to Data Visualization",
    "section": "Matplotlib",
    "text": "Matplotlib"
  },
  {
    "objectID": "session_004.html#other-options-for-plotting",
    "href": "session_004.html#other-options-for-plotting",
    "title": "Lesson 4 - Intro to Data Visualization",
    "section": "Other options for plotting",
    "text": "Other options for plotting"
  },
  {
    "objectID": "session_004.html#homework",
    "href": "session_004.html#homework",
    "title": "Lesson 4 - Intro to Data Visualization",
    "section": "Homework",
    "text": "Homework"
  },
  {
    "objectID": "session_004.html#additional-readings",
    "href": "session_004.html#additional-readings",
    "title": "Lesson 4 - Intro to Data Visualization",
    "section": "Additional Readings",
    "text": "Additional Readings\n\nhttps://pandas.pydata.org/docs/user_guide/visualization.html"
  },
  {
    "objectID": "session_006.html",
    "href": "session_006.html",
    "title": "Lesson 6 - Intro to ML & Linear Regression",
    "section": "",
    "text": "https://en.wikipedia.org/wiki/Machine_learning"
  }
]